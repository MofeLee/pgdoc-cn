<!-- doc/src/sgml/tsearch2.sgml -->

<sect1 id="tsearch2" xreflabel="tsearch2">
 <title>tsearch2</title>

 <indexterm zone="tsearch2">
  <primary>tsearch2</primary>
 </indexterm>

<!--
  <para>
  The <application>tsearch2</> module provides backwards-compatible
  text search functionality for applications that used
  <application>tsearch2</> before text searching was integrated
  into core <productname>PostgreSQL</productname> in release 8.3.
 </para>
-->
 <para>
<application>tsearch2</>模块为在文本搜索整合到内核<productname>PostgreSQL</productname>
版本8.3之前的应用提供后向兼容的文本搜索功能。
 </para>

 <sect2>
  <!--
  <title>Portability Issues</title>
  -->
  <title>可移植性问题</title>

<!-- 
  <para>
   Although the built-in text search features were based on
   <application>tsearch2</> and are largely similar to it,
   there are numerous small differences that will create portability
   issues for existing applications:
  </para> 
-->
  <para>
尽管内建的文本搜索功能基于<application>tsearch2</>并且在很大程度上相似，
但是有许多微小的差异将造成现有应用的可移植性问题：
  </para>

  <itemizedlist mark="bullet">
   <listitem>
<!-- 
    <para>
     Some functions' names were changed, for example <function>rank</>
     to <function>ts_rank</>.
     The replacement <literal>tsearch2</literal> module
     provides aliases having the old names.
    </para>
-->
    <para>
     一些函数的名字改变了，例如<function>rank</>变成了<function>ts_rank</>。
 替换的<literal>tsearch2</literal>模块提供了具有旧名称的别名。
    </para>
   </listitem>

   <listitem>
<!-- 
    <para>
     The built-in text search data types and functions all exist within
     the system schema <literal>pg_catalog</>.  In an installation using
     <application>tsearch2</>, these objects would usually have been in
     the <literal>public</> schema, though some users chose to place them
     in a separate schema of their own.  Explicitly schema-qualified
     references to the objects will therefore fail in either case.
     The replacement <literal>tsearch2</literal> module
     provides alias objects that are stored in <literal>public</>
     (or another schema if necessary) so that such references will still work.
    </para> 
-->
    <para>
    内建文本搜索数据类型和函数都存在于系统模式<literal>pg_catalog</>中。
在一个安装中使用<application>tsearch2</>，这些对象将通常存在于<literal>public</>模式中，
尽管一些用户选择在他们自己的模式中放置它们。引用这些对象的明确模式限定将因此会在两种情况下失败。
替换的<literal>tsearch2</literal>模块提供了存储在<literal>public</>（或者是另一个模式，如果需要）
中的别名对象，所以这样的引用仍然工作。
    </para>
   </listitem>

   <listitem>
<!-- 
    <para>
     There is no concept of a <quote>current parser</> or <quote>current
     dictionary</> in the built-in text search features, only of a current
     search configuration (set by the <varname>default_text_search_config</>
     parameter).  While the current parser and current dictionary were used
     only by functions intended for debugging, this might still pose
     a porting obstacle in some cases.
     The replacement <literal>tsearch2</literal> module emulates these
     additional state variables and provides backwards-compatible functions
     for setting and retrieving them.
    </para> 
-->
    <para>
    在内建文本搜索功能中没有<quote>当前分析器</>或<quote>当前字典</>的概念，
只有一个当前搜索配置（通过<varname>default_text_search_config</>参数设置）的概念。
当当前分析器和当前字典只被调试函数使用时，可能在某些情况下仍然会造成移植的障碍。
替换的<literal>tsearch2</literal>模块仿真这些额外的状态变量，
并为设置和检索它们提供后向兼容函数。
    </para>
   </listitem>
  </itemizedlist>

<!-- 
  <para>
   There are some issues that are not addressed by the replacement
   <literal>tsearch2</literal> module, and will therefore require
   application code changes in any case:
  </para> 
-->
  <para>
   有一些问题没有被替换的<literal>tsearch2</literal>模块处理，
   并且因此将在任意情况下请求改变应用代码：
  </para>

  <itemizedlist mark="bullet">
   <listitem>
<!-- 
    <para>
     The old <function>tsearch2</> trigger function allowed items in its
     argument list to be names of functions to be invoked on the text data
     before it was converted to <type>tsvector</> format.  This was removed
     as being a security hole, since it was not possible to guarantee that
     the function invoked was the one intended.  The recommended approach
     if the data must be massaged before being indexed is to write a custom
     trigger that does the work for itself.
    </para> 
-->
<para>
旧的<function>tsearch2</>触发器函数允许参数列表中的项在转换成<type>tsvector</>
格式之前，成为在文本数据中被调用的函数的名字。因为这是一个安全漏洞所以被删除了，
因此不可能保证调用的函数是想要的那一个。如果数据在被索引之前必须被处理，
那么推荐的方式是写一个为其本身工作的自定义触发器。
</para>
   </listitem>

   <listitem>
<!-- 
    <para>
     Text search configuration information has been moved into core
     system catalogs that are noticeably different from the tables used
     by <application>tsearch2</>.  Any applications that examined
     or modified those tables will need adjustment.
    </para> 
-->
    <para>
     文本搜索配置信息移动到了内核系统目录，明显不同于用于<application>tsearch2</>的表。
 任何检查或修改这些表的应用将需要调整。
    </para>
   </listitem>

   <listitem>
<!-- 
    <para>
     If an application used any custom text search configurations,
     those will need to be set up in the core
     catalogs using the new text search configuration SQL commands.
     The replacement <literal>tsearch2</literal> module offers a little
     bit of support for this by making it possible to load an old set
     of <application>tsearch2</> configuration tables into
     <productname>PostgreSQL</productname> 8.3.  (Without the module,
     it is not possible to load the configuration data because values in the
     <type>regprocedure</> columns cannot be resolved to functions.)
     While those configuration tables won't actually <emphasis>do</>
     anything, at least their contents will be available to be consulted
     while setting up an equivalent custom configuration in 8.3.
    </para> 
-->
    <para>
如果一个应用使用了任何自定义文本搜索配置，他们将需要使用新的文本搜索配置SQL命令在内核目录中设置。
替换的<literal>tsearch2</literal>模块为此提供了一点支持，通过让加载一组老的<application>tsearch2</>
配置表到<productname>PostgreSQL</productname> 8.3中成为可能。（没有这个模块，
不可能加载配置数据，因为<type>regprocedure</>字段中的值不能解析为函数。）
虽然这些配置表不能实际<emphasis>做</>任何事情，
至少它们的内容在8.3中设置一个相等的自定义配置时可用于咨询。
    </para>
   </listitem>

   <listitem>
<!-- 
    <para>
     The old <function>reset_tsearch()</> and <function>get_covers()</>
     functions are not supported.
    </para> 
-->
    <para>
     不支持旧的<function>reset_tsearch()</>和<function>get_covers()</>函数。
    </para>
   </listitem>

   <listitem>
<!--
     <para>
     The replacement <literal>tsearch2</literal> module does not define
     any alias operators, relying entirely on the built-in ones.
     This would only pose an issue if an application used explicitly
     schema-qualified operator names, which is very uncommon.
    </para>
-->
    <para>
     替换的<literal>tsearch2</literal>模块没有定义任何别名运算符，
 完全依赖于内建的那个。这只在一个应用使用明确模式限定的操作符名时造成问题，
 这是非常罕见的。
    </para>
   </listitem>
  </itemizedlist>

 </sect2>

 <sect2>
  <!--
  <title>Converting a pre-8.3 Installation</title>
  -->
  <title>转换一个8.3之前的安装</title>

<!--
   <para>
   The recommended way to update a pre-8.3 installation that uses
   <application>tsearch2</> is:
  </para>
-->
  <para>
   更新使用<application>tsearch2</>的8.3之前的安装的推荐方式是：
  </para>

  <procedure>
   <step>
<!-- 
    <para>
     Make a dump from the old installation in the usual way,
     but be sure not to use <literal>-c</> (<literal>-&#045;clean</>)
     option of <application>pg_dump</> or <application>pg_dumpall</>.
    </para>
-->
<para>
     以普通的方式从老的安装中做一个转储，但是确保不要使用<application>pg_dump</>
 或<application>pg_dumpall</>的<literal>-c</> (<literal>--clean</>)选项。
    </para>
   </step>

   <step>
<!--
     <para>
     In the new installation, create empty database(s) and install
     the replacement <literal>tsearch2</literal> module into each
     database that will use text search.  This must be done
     <emphasis>before</> loading the dump data!  If your old installation
     had the <application>tsearch2</> objects in a schema other
     than <literal>public</>, be sure to adjust the
     <command>CREATE EXTENSION</> command so that the replacement
     objects are created in that same schema.
    </para>
-->
<para>
     在新的安装中，创建空的数据库并安装替换的<literal>tsearch2</literal>
 模块到每个将要使用文本搜索的数据库。这必须在加载转储数据<emphasis>之前</>完成！
 如果你的旧安装在除了<literal>public</>之外的一个模式中有<application>tsearch2</>对象，
 确保调整<command>CREATE EXTENSION</>命令，这样替换的对象在相同的模式中创建。
    </para>
   </step>

   <step>
<!--
     <para>
     Load the dump data.  There will be quite a few errors reported
     due to failure to recreate the original <application>tsearch2</>
     objects.  These errors can be ignored, but this means you cannot
     restore the dump in a single transaction (eg, you cannot use
     <application>pg_restore</>'s <option>-1</> switch).
    </para>
-->
     <para>
     加载转储数据。将会报告一些错误，因为未能重新创建原来的<application>tsearch2</>对象。
 可以忽略这些错误，但是这意味着你不能在单个事务中恢复转储
 （例如，你不能使用<application>pg_restore</>的<option>-1</>开关）。
    </para>
   </step>

   <step>
<!--
     <para>
     Examine the contents of the restored <application>tsearch2</>
     configuration tables (<structname>pg_ts_cfg</> and so on), and
     create equivalent built-in text search configurations as needed.
     You may drop the old configuration tables once you've extracted
     all the useful information from them.
    </para>
-->
    <para>
     检查恢复的<application>tsearch2</>配置表的内容（<structname>pg_ts_cfg</>等），
 并根据需要创建相等的内建文本搜索配置。你可能会在提取了所有有用的信息之后删除旧的配置表。
    </para>
   </step>

   <step>
    <para>
     <!--
 Test your application.
 -->
 测试你的应用。
    </para>
   </step>
  </procedure>

<!-- 
  <para>
   At a later time you may wish to rename application references
   to the alias text search objects, so that you can eventually
   uninstall the replacement <literal>tsearch2</literal> module.
  </para>
-->
  <para>
   稍后你可能希望重命名应用引用到别名文本搜索对象，
   这样你可以最后卸载替换的<literal>tsearch2</literal>模块。
  </para>

 </sect2>

 <sect2>
  <!-- 
  <title>References</title>
  -->
  <title>参考文献</title>
  <para>
   Tsearch2 开发网站
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"></ulink>
  </para>
 </sect2>

</sect1>
